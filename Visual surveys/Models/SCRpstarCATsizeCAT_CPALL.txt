
model {

  sigma ~ dunif(0,100)
  alpha1 <- 1/(2*sigma*sigma)
  
  for(t in 1:nproj){
    for(l in 1:L){   # 4 size categories
      #prior for intercept
      p0[l] ~ dunif(0,5)
      alpha0[l] <- logit(p0[l])
        
      # Posterior conditional distribution for N-n (and hence N):
      n0[t,l] ~ dnegbin(pstar[l],ngroupall[t,l])  # number of failures by project and size category
      Ngroup[t,l] <- ngroup[t,l] + n0[t,l]
    }

    N[t] <- sum(Ngroup[t,1:L])  # successful observations plus failures to observe of each size = total N

    #Probability of capture for integration grid points
    #pdot = probability of being detected at least once (given location)

    for(l in 1:L){  # size category
      for(g in 1:Gpts){ # Gpts = number of points on integration grid
        for(j in 1:J){  # J = number of traps
          #Probability of an individual of size i being missed at grid cell g and trap j multiplied by total effort (K) at that trap
          miss_allK[l,g,j,t] <- pow((1 - p0[l]*exp(-alpha1*Gdist[g,j]*Gdist[g,j])),K[j,t])
        } #J
        pdot.temp[l,g,t] <- 1 - prod(miss_allK[l,g,,t]) #Prob of detect each size category across entire study area and time period
        pdot[l,g,t] <- max(pdot.temp[l,g,t], 1.0E-10)  #pdot.temp is very close to zero and will lock model up with out this
      } #G
      pstar[l,t] <- (sum(pdot[l,1:Gpts,t]*a[1:Gpts]))/A #prob of detecting a size category at least once in S (a=area of each integration grid, given as data)

      # Zero trick for initial 1/pstar^n
      loglikterm[l,t] <- -ngroup[l,t] * log(pstar[l,t])
      lambda[l,t] <- -loglikterm[l,t] + 10000
      dummy[l,t] ~ dpois(lambda[l,t]) # dummy = 0; entered as data
    } #L
  } #T

  # prior prob for each grid cell (setting b[1:Gpts] = rep(1,Gpts) is a uniform prior across all cells)
  pi[1:Gpts] ~ ddirch(b[1:Gpts])

  for(t in 1:nproj){
    for(i in 1:nFound[t]){  ## n = number of observed individuals
      ## For use when defining traps on a grid cell
      s[i,t] ~ dcat(pi[1:Gpts])

      # Model for capture histories of observed individuals:
      for(j in 1:J){  ## J = number of traps
        y[i,j,t] ~ dpois(p[i,j,t]*K[j,t])
        p[i,j,t] <- p0[size[i,t]]*exp(-alpha1*Gdist[s[i,t],j]*Gdist[s[i,t],j])
      }#J
    }#I

    #derived proportion in each size class
    for(l in 1:L){
      piGroup[t,l] <- Ngroup[t,l]/N[t]
    }#L
  }#T
}

